# -*- coding: utf-8 -*-
"""Handwriteen Digits recognition using Tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dFzYSfFLqHi-0v_Z6Ugg1rs0PLg6agA-
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
# %matplotlib inline

#loading the dataset
mnist_data = tf.keras.datasets.mnist
(train_images, train_labels), (test_images, test_labels) = mnist_data.load_data()

labels = [0,1,2,3,4,5,6,7,8,9]

#scaling the images
train_images = train_images/255.0
test_images = test_images/255.0

#adding a dummy channel
train_images = train_images[..., np.newaxis]
test_images = test_images[..., np.newaxis]

#building the model
model = Sequential([
                    Conv2D(8, (3,3), padding = 'same', activation = 'relu', input_shape = (28,28,1)),
                    MaxPooling2D((2,2)),
                    Flatten(),
                    Dense(64, activation = 'relu'),
                    Dense(64, activation = 'relu'),
                    Dense(10, activation = 'softmax')
                  ])

#compiling the model and defining the loss funtion and the optimizer
opt = tf.keras.optimizers.Adam(learning_rate = 0.05)
acc = tf.keras.metrics.SparseCategoricalAccuracy()
model.compile(optimizer = opt, loss = 'sparse_categorical_crossentropy',metrics = [acc])

#training the model
history = model.fit(train_images, train_labels, epochs = 5)

frame = pd.DataFrame(history.history)

acc_plot = frame.plot(y="sparse_categorical_accuracy", title="Accuracy vs Epochs", legend=False)
acc_plot.set(xlabel="Epochs", ylabel="Accuracy")

acc_plot = frame.plot(y="loss", title = "Loss vs Epochs",legend=False)
acc_plot.set(xlabel="Epochs", ylabel="Loss")

test_loss, test_accuracy = model.evaluate(test_images[..., np.newaxis], test_labels, verbose = 2)
print(f"Test loss: {test_loss}")
print(f"Test accuracy: {test_accuracy}")

num_test_images = test_images.shape[0]

random_inx = np.random.choice(num_test_images, 4)
random_test_images = test_images[random_inx, ..., np.newaxis]
random_test_labels = test_labels[random_inx, ...]

predictions = model.predict(random_test_images)

predictions = list(predictions)

for i in range(0, len(predictions)):
  print(predictions[i])
  n = np.argmax(predictions)
  print(labels[n])

